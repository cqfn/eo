xsls: []
tests:
  - /program/license[text()!='']
  - /program/metas[count(meta)=4]
  - /program/metas/meta[head='foo' and tail='']
  - /program/objects[count(o)=7]
  - //o[@base='bool']
  - //o[@base='string']
  - //o[@base='char' and text()='e']
  - //o[@base='float' and text()='500.43']
  - //o[@base='int' and text()='31']
  - //o[@base='string' and text()='Hello, world!']
  - //o[@name='hello' and @const]
  - //o[@as='i']
  - //o[@base='.five']
  - //objects[not(.//o[@name=''])]
  - //o[@atom and @name='atom' and count(o)=2 and o[@vararg and @name='a']]
eo: |
  # The purpose of this test case is to make
  # sure all possible syntax scenarios can
  # be parsed by the ANTLR

  +alias Test Test
  +alias org.example.foo
  +foo
  +bar Some text

  500.43 > one

  # This is just a simple string
  "Hello, world!" > hello!

  [tt a...] > atom /int

  # This is very good object
  [x] > first
    second > hello
      $.add 5 > i
      third:foo > x...!
        f 12 false
          (((t 22) r:t 8.54 "yes" 'e').print 88 0x1f):hey true > a!
            # This object is also very good
            []
              ^.^.hey > you...
            kid
      f:u
        z
          z 5
            z
    oops

  # Comments are allowed only in front of top-level objects
  []
    one.two.three.four.five
      t
    .two "hello!"
    .three > a1
    .four > a2
    .five > a3

  test
    me
      now:i (f (f (f (f 1)))).f

  [] > ooo
    # This is one
    [] > o-1

    # This is two
    [] > o2
