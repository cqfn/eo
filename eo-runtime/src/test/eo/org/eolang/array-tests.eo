+package org.eolang
+alias org.eolang.txt.sprintf
+alias org.eolang.io.stdout
+junit

[] > makes-array-through-special-syntax
  eq. > @
    2
    (* 1 2).length

[] > gets-lengths-of-empty-array-through-special-syntax
  eq. > @
    0
    *.length

[] > iterates-with-each
  *
    "one"
    "two"
    "three"
  .each > @
    [i] (stdout i > @)

# check that an empty array's .length equals to zero
[] > emptyArrayLengthTest
  [elements...] > arr
  eq. > @
    0
    (arr).elements.length

# check that array.length works properly for non-empty arrays
[] > nonEmptyArrayLengthTest
  [elements...] > arr
  eq. > @
    5
    (arr "a" "b" "c" "d" "e").elements.length

# if map does mutate arrays, then this test would fail
# because of the absence of the toInt attribute
# that is caused by mutation of the original string array
# to an int array
[] > mapDoesNotMutateArray
  [numbers...] > squares
    map. > @
      numbers
      [current]
        pow. > @
          current.toInt
          2
  (squares "1" "2" "3") > sq
  eq. > @
    (sprintf "%d %d %d" 1 4 9)
    (sprintf "%d %d %d" (sq.get 0) (sq.get 1) (sq.get 2))

# this test performs mapping of array using the index for it
[] > mapiIndexCanBeAccessed
  [numbers...] > multipliedByNaturalSequence
    mapi. > @
      numbers
      [current index]
        mul. > @
          current.toInt
          index.add 1
  (multipliedByNaturalSequence "1" "2" "3") > mulSeq
  eq. > @
    (sprintf "%d %d %d" 1 4 9)
    (sprintf "%d %d %d" (mulSeq.get 0) (mulSeq.get 1) (mulSeq.get 2))
